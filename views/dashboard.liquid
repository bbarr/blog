
{% layout "layout.liquid", hideOverflow: true %}

{% block content %}

<div class="flex" x-data="state()" x-init="() => { posts[0] && selectPost(posts[0].id) }">

  <sidebar class="flex flex-col justify-between h-screen w-56 bg-gray-100">
    <div>
      <div class="p-6">
        <h1>{{ site.name }}</h1>
        <a class="text-gray-800 text-sm" href="https://{{ site.handle }}.prosaic.blog" target="_blank">{{ site.handle }}.prosaic.blog</a>
      </div>
      <nav>
        <p class="uppercase text-gray-600 mt-8 mb-2 text-sm px-6">Content</p>
        <a class="side-menu-link active" href="/dashboard">{% include '_icon.liquid', name: 'page' %}Posts</a>
      </nav>
      <nav>
        <p class="uppercase text-gray-600 mt-6 mb-2 text-sm px-6">Settings</p>
        <a class="side-menu-link" href="/settings/general">{% include '_icon.liquid', name: 'cog' %}General</a>
        <a class="side-menu-link" href="/settings/theme">{% include '_icon.liquid', name: 'palette' %}Theme</a>
      </nav>
    </div>
    <nav class="flex flex-col text-center">
      <p class="w-full uppercase text-xs text-gray-600 mt-6 mb-2 px-6">Questions | Feedback</p>
      <a class="w-full py-3 px-6 text-xs text-gray-700 hover:bg-gray-200 hover:text-gray-800 hover:underline" href="mailto:contact@prosaic.blog">contact@prosaic.blog</a>
    </nav>
  </sidebar>

  <!--
  <div x-bind:class="{ 'open': isMenuOpen }" class="menu fixed right-0 mt-16 top-0 bottom-0 border border-t-0">
    <div class="p-4">
      <button class="button" x-on:click="_delete()">Delete</button>
    </div>
  </div>
  -->

  <div class="alert" x-bind:class="{ 'open': alert.open }">
    <div x-show="alert.title" class="alert-title" x-text="alert.title"></div>
    <div x-show="alert.content" class="alert-content" x-text="alert.content"></div>
  </div>

  <div class="w-96 border-l border-r border-gray-300">
    <div class="flex items-center bg-gray-100 h-16 px-4 border-b border-gray-300">
      <!--
      <div class="h-10 border border-gray-300 hover:border-gray-400 flex-1 mr-2 rounded flex items-center bg-white">
        <div class="w-6 h-6 ml-2 mr-1">{% include '_icon.liquid', name: 'search' %}</div>
        <input class="flex-1 outline-none" type="text">
      </div>
      -->
      <div class="flex-1"></div>
      <button x-on:click="create()" class="btn btn-icon"><span class="h-6 w-6 block m-auto">{% include '_icon.liquid', name: 'plus' %}</span></button>
    </div>
    <div style="height: calc(100vh - 4rem); overflow-y: auto;">
      <!--
      <div class="pt-3 px-4 border-b border-gray-200">
        <button class="filter active-filter">Drafts</a>
        <button class="filter">Published</a>
      </div>
      -->
      <template x-for="post in posts" :key="post">
      <div class="post" x-bind:class="{ 'active': selectedId === post.id }" x-on:click="selectPost(post.id)">
        <span class="font-medium" x-text="post.title"></span>
        <div class="mt-2 flex justify-between items-center text-xs">
          <span 
            x-show="post.latestPublishedAt" 
            x-text="'Published'">
          </span>
          <span x-show="!post.latestPublishedAt">Draft</span>
          <div x-show="post.latestPublishedAt && post.latestPublishedAt < post.updatedAt" class="pill info">Unpublished changes</div>
        </div>
      </div>
      </template>
    </div>
  </div>

  <div class="flex-1" x-show="selectedId" style="display: none">
    <div class="flex-base justify-end h-16 border-b border-gray-200 px-6 space-x-2">
      <button x-on:click="edit()" class="btn">Edit</button>
      <button x-on:click="isMenuOpen ? isMenuOpen = false : isMenuOpen = true" class="btn btn-icon"><span class="h-6 w-6 block m-auto">{% include '_icon.liquid', name: 'snowman' %}</span></button>
    </div>
    <div class="py-5 px-10" style="height: calc(100vh - 4rem); overflow-y: auto;">
      <div class="editor-preview max-w-3xl mx-auto" x-html="preview"></div>
    </div>
  </div>


  <div class="snowman-menu" style="display: none" x-show="isMenuOpen" x-on:click.away="isMenuOpen = false">
    <a :href="'/editor/' + (selectedPost && selectedPost.id)">Edit</a>
    {% unless cannotPublish %}<a x-show="selectedPost && selectedPost.latestPublishedAt && selectedPost.latestPublishedAt < selectedPost.updatedAt" href="#" x-on:click.prevent="publish()">Publish changes</a>{% endunless %}
    {% unless cannotPublish %}<a x-show="selectedPost && !selectedPost.latestPublishedAt && selectedPost.updatedAt" href="#" x-on:click.prevent="publish()">Publish</a>{% endunless %}
    <a x-show="selectedPost && selectedPost.latestPublishedAt" href="#" x-on:click.prevent="unpublish()">Unpublish</a>
    <a href="#" x-on:click.prevent="_delete()">Delete</a>
  </div>

</div>

<script src="https://cdn.jsdelivr.net/highlight.js/latest/highlight.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/highlight.js/latest/styles/github.min.css">
<script src="https://unpkg.com/easymde/dist/easymde.min.js"></script>
<link rel="stylesheet" href="/preview.css">
<script>
  const Preview = {
    renderDate(post) {
      const stamp = post.latestPublishedAt
      if (!stamp)
        return `Not published`
      const date = new Date(stamp)
      const month = date.getMonth()
      const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']
      return `${months[month]} ${date.getDate()}, ${date.getFullYear()}`
    },
    renderReadingTime(post) {
      return `${Math.floor(post.content.length / 540)} min read`
    }
  }
</script>
<script>
  function state() {

    const api = {
      posts: {{ posts | json }},
      preview: '',
      isMenuOpen: false,
      selectedId: null,
      selectedPost: null,
      alert: {},
      create() {
        window.location.href = `/editor/new`
      },
      edit() {
        window.location.href = `/editor/${api.selectedId}`
      },
      publish() {
        fetch(`/api/posts/${this.selectedId}/publish`, {
          method: 'POST'
        }).then(() => {
          this.isMenuOpen = false
          this.selectPost(this.selectedId)
          this.setAlert('Post published!')
        })
      },
      unpublish() {
        fetch(`/api/posts/${this.selectedId}/unpublish`, {
          method: 'POST'
        }).then((resp) => {
          this.isMenuOpen = false
          this.selectPost(this.selectedId)
          this.setAlert('Post unpublished', 'It will not appear on your blog.')
        })
      },
      async selectPost(id) {
        this.selectedId = id
        const post = await fetch(`/api/posts/${id}`).then(resp => resp.json()).then(json => json.data)
        const content = EasyMDE.prototype.markdown.call({ options: { renderingConfig: { codeSyntaxHighlighting: true } } }, post.content)
        const title = post.title
        this.preview = `
          <div class="title">${title}</div>
          <div class="meta">
            <span>${Preview.renderDate(post)}</span>
            <span>${Preview.renderReadingTime(post)}</span>
          </div>
          <div class="content">${content}</div>
        `
        this.selectedPost = post
        const index = this.posts.findIndex(p => p.id == post.id)
        this.posts[index] = post
      },
      setAlert(title, content, timeout=3000) {
        this.alert = { title, content, open: true }
        setTimeout(() => this.alert = { title, content }, timeout)
      },
      _delete() {
        this.isMenuOpen = false
        if (api.selectedId && confirm('Are you sure you want to delete this post? This is permenant.')) {
          fetch(`/api/posts/${api.selectedId}`, {
            method: 'DELETE'
          }).then((resp) => {
            const index = this.posts.findIndex(p => p.id == api.selectedId)
            this.posts.splice(index, 1)
            const next = this.posts[Math.max(index, 0)]
            next ? api.selectPost(next.id) : window.location.reload()
          })
        }
      }
    }

    return api
  }
</script>

{% endblock %}
