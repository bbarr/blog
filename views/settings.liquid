
{% layout "layout.liquid" %}

{% block content %}

<div class="flex" x-data="state()">

  <sidebar class="h-screen w-56 bg-gray-100 py-6">
    <div class="px-6">
      <h1>{{ site.name }}</h1>
      <h2 class="uppercase text-gray-800 text-sm">Prosaic</h2>
      <p class="uppercase text-gray-600 mt-10 mb-2">Category</p>
    </div>
    <nav>
      <a class="side-menu-link" href="/dashboard">{% include '_icon.liquid', name: 'page' %}Posts</a>
      <a class="side-menu-link active" href="/settings">{% include '_icon.liquid', name: 'cog' %}Settings</a>
    </nav>
  </sidebar>

  <div class="flex-1 p-6 border-l border-r max-w-lg" x-data="state()">

    <div class="alert" x-bind:class="{ 'open': alert.open }">
      <div x-show="alert.title" class="alert-title" x-text="alert.title"></div>
      <div x-show="alert.content" class="alert-content" x-text="alert.content"></div>
    </div>

    <h2 class="border-b pb-4 font-medium text-lg">User settings</h1>
    <form x-on:submit.prevent="save()" class="space-y-4">
      <div>
        <label class="field-label" for="name">Name</label>
        <input class="field-input" x-model="name" type="text">
      </div>
      <div>
        <label class="field-label" for="email">Email</label>
        <input class="field-input" x-model="email" type="email">
      </div>
      <div>
        <label class="field-label" for="picture">Profile Picture</label>
        <img x-bind:src="avatar">
        <input class="field-input" type="file" x-on:change="uploadAvatar">
      </div>
      <h2 class="border-b mt-8 pb-4 font-medium text-lg">Blog settings</h1>
      <div>
        <label class="field-label" for="title">Title</label>
        <input class="field-input" x-model="title" type="text">
      </div>
      <div>
        <label class="field-label" for="description">Description</label>
        <input class="field-input" x-model="description" type="text">
      </div>
      <div>
        <label class="field-label" for="timezone-offset">Time Zone</label>
        <select class="field-select" x-model="timezone">
          <option value="-12:00">(GMT -12:00) Eniwetok, Kwajalein</option>
          <option value="-11:00">(GMT -11:00) Midway Island, Samoa</option>
          <option value="-10:00">(GMT -10:00) Hawaii</option>
          <option value="-09:50">(GMT -9:30) Taiohae</option>
          <option value="-09:00">(GMT -9:00) Alaska</option>
          <option value="-08:00">(GMT -8:00) Pacific Time (US &amp; Canada)</option>
          <option value="-07:00">(GMT -7:00) Mountain Time (US &amp; Canada)</option>
          <option value="-06:00">(GMT -6:00) Central Time (US &amp; Canada), Mexico City</option>
          <option value="-05:00">(GMT -5:00) Eastern Time (US &amp; Canada), Bogota, Lima</option>
          <option value="-04:50">(GMT -4:30) Caracas</option>
          <option value="-04:00">(GMT -4:00) Atlantic Time (Canada), Caracas, La Paz</option>
          <option value="-03:50">(GMT -3:30) Newfoundland</option>
          <option value="-03:00">(GMT -3:00) Brazil, Buenos Aires, Georgetown</option>
          <option value="-02:00">(GMT -2:00) Mid-Atlantic</option>
          <option value="-01:00">(GMT -1:00) Azores, Cape Verde Islands</option>
          <option value="+00:00">(GMT) Western Europe Time, London, Lisbon, Casablanca</option>
          <option value="+01:00">(GMT +1:00) Brussels, Copenhagen, Madrid, Paris</option>
          <option value="+02:00">(GMT +2:00) Kaliningrad, South Africa</option>
          <option value="+03:00">(GMT +3:00) Baghdad, Riyadh, Moscow, St. Petersburg</option>
          <option value="+03:50">(GMT +3:30) Tehran</option>
          <option value="+04:00">(GMT +4:00) Abu Dhabi, Muscat, Baku, Tbilisi</option>
          <option value="+04:50">(GMT +4:30) Kabul</option>
          <option value="+05:00">(GMT +5:00) Ekaterinburg, Islamabad, Karachi, Tashkent</option>
          <option value="+05:50">(GMT +5:30) Bombay, Calcutta, Madras, New Delhi</option>
          <option value="+05:75">(GMT +5:45) Kathmandu, Pokhara</option>
          <option value="+06:00">(GMT +6:00) Almaty, Dhaka, Colombo</option>
          <option value="+06:50">(GMT +6:30) Yangon, Mandalay</option>
          <option value="+07:00">(GMT +7:00) Bangkok, Hanoi, Jakarta</option>
          <option value="+08:00">(GMT +8:00) Beijing, Perth, Singapore, Hong Kong</option>
          <option value="+08:75">(GMT +8:45) Eucla</option>
          <option value="+09:00">(GMT +9:00) Tokyo, Seoul, Osaka, Sapporo, Yakutsk</option>
          <option value="+09:50">(GMT +9:30) Adelaide, Darwin</option>
          <option value="+10:00">(GMT +10:00) Eastern Australia, Guam, Vladivostok</option>
          <option value="+10:50">(GMT +10:30) Lord Howe Island</option>
          <option value="+11:00">(GMT +11:00) Magadan, Solomon Islands, New Caledonia</option>
          <option value="+11:50">(GMT +11:30) Norfolk Island</option>
          <option value="+12:00">(GMT +12:00) Auckland, Wellington, Fiji, Kamchatka</option>
          <option value="+12:75">(GMT +12:45) Chatham Islands</option>
          <option value="+13:00">(GMT +13:00) Apia, Nukualofa</option>
          <option value="+14:00">(GMT +14:00) Line Islands, Tokelau</option>
        </select>
      </div>
      <div>
        <label class="field-label" for="favicon">Favicon</label>
        <img x-bind:src="favicon">
        <input class="field-input" type="file" x-on:change="uploadFavicon">
      </div>
      <div>
        <label class="field-label" for="handle">Subdomain (cannot be changed)</label>
        <input class="field-input" x-model="handle" type="text" disabled>
        <!--
        <div x-show="handleError">Subdomain is not valid. Please try another one.</div>
      -->
      </div>
      <div>
        <label class="field-label" for="handle">Custom domain</label>
        <input class="field-input" x-model="domain" type="text">
        <div x-show="domainError">Domain is not valid. Please try another one.</div>
      </div>
      <div class="flex items-center justify-between">
        <button class="button flex-1 mr-2">Save</button>
        <button @click.prevent="updateBilling()" class="button flex-1 bg-transparent text-black hover:bg-transparent">Update billing</button>
      </div>
    </form>
  </div>

</div>

<script src="https://cdn.jsdelivr.net/highlight.js/latest/highlight.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/highlight.js/latest/styles/github.min.css">
<script src="https://unpkg.com/easymde/dist/easymde.min.js"></script>
<script>
  function state() {

    const originalCustomDomain = '{{ site.customDomain }}'

    const api = {

      alert: { title: '', content: '' },
      uploadingImage: false,

      name: `{{ user.name }}`,
      email: '{{ user.email }}',
      avatar: '{{ user.avatar }}',
      title: `{{ site.name }}`,
      description: `{{ site.description }}`,
      favicon: '{{ site.favicon }}',
      timezone: '{{ site.timezone }}',
      handle: '{{ site.handle }}',
      domain: '{{ site.customDomain }}',
      //handleError: false,
      domainError: false,

      /*
      isHandleValid() {
        return fetch(`/api/validate-handle/${this.handle}`).then(resp => resp.status === 200)
      },
      */

      isDomainValid() {
        return fetch(`/api/validate-domain?domain=${encodeURI(this.domain)}`).then(resp => resp.status === 200)
      },

      async save() {

        if (this.uploadingImage) 
          return

        /*
        if (!await this.isHandleValid()) {
          return this.handleError = true
        } else {
          this.handleError = false
        }
        */

        const hasNewCustomDomain = originalCustomDomain !== this.domain

        if (hasNewCustomDomain && !await this.isDomainValid()) {
          return this.domainError = true
        } else {
          this.domainError = false
        }
        
        return fetch(`/api/settings`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            name: this.name,
            email: this.email,
            avatar: this.avatar,
            title: this.title,
            description: this.description,
            favicon: this.favicon,
            timezone: this.timezone,
            handle: this.handle,
            customDomain: hasNewCustomDomain ? this.domain : null
          })
        }).then(() => {
          this.setAlert('Settings saved!')
        })
      },

      setAlert(title, content, timeout=3000) {
        this.alert = { title, content, open: true }
        setTimeout(() => this.alert = { title, content }, timeout)
      },

      async updateBilling() {
        const resp = await fetch('/api/create-update-billing-session').then(resp => resp.json())
        window.location.href = resp.data
      },

      async uploadImage(file) {
        this.uploadingImage = true
        const { data, errors } = await fetch('/api/presigned-upload-url').then(resp => resp.json())
        if (data) {
          const [ uploadUrl, hostingUrl ] = data
          const headers = new Headers({
            'Content-Type': file.type,
            'x-amz-acl': 'public-read'
          })
          await fetch(uploadUrl, {
            method: 'PUT',
            headers,
            body: file
          })
          this.uploadingImage = false
          return hostingUrl
        }
      },

      async uploadAvatar(e) {
        const canvas = await crop(e.target.files[0], 1, {
          maxWidth: 300,
          maxHeight: 300
        })
        canvas.toBlob(async (blob) => {
          //const url = await this.uploadImage(blob)
          const url = canvas.toDataURL('image/jpeg')
          this.avatar = url
        }, 'image/jpeg', 1)
      },

      async uploadFavicon(e) {
        const canvas = await crop(e.target.files[0], 1, {
          maxWidth: 32,
          maxHeight: 32
        })
        this.favicon = canvas.toDataURL('image/png')
      }
    }

    // file -> canvas
    function crop(file, aspectRatio, opts={}) {
      const { maxWidth, maxHeight, validations } = opts

      // we return a Promise that gets resolved with our canvas element
      return new Promise(resolve => {

        const fr = new FileReader
        fr.readAsDataURL(file)

        fr.onload = () => {

          // this image will hold our source image data
          const inputImage = new Image();

          // we want to wait for our image to load
          inputImage.onload = () => {

            if (validations) {
              for (let validate of validations) {
                const error = validate(inputImage)
                if (error) {
                  return alert(error)
                }
              }
            }

            // let's store the width and height of our image
            const inputWidth = inputImage.naturalWidth
            const inputHeight = inputImage.naturalHeight

            // get the aspect ratio of the input image
            const inputImageAspectRatio = inputWidth / inputHeight;

            // if it's bigger than our target aspect ratio
            let outputWidth = inputWidth;
            let outputHeight = inputHeight;
            if (inputImageAspectRatio > aspectRatio) {
              outputWidth = inputHeight * aspectRatio;
            } else if (inputImageAspectRatio < aspectRatio) {
              outputHeight = inputWidth / aspectRatio;
            }

            // calculate the position to draw the image at
            const outputX = (outputWidth - inputWidth) * .5;
            const outputY = (outputHeight - inputHeight) * .5;

            // create a canvas that will present the output image
            const outputImage = document.createElement('canvas');

            // set it to the same size as the image
            outputImage.width = outputWidth;
            outputImage.height = outputHeight;

            // draw our image at position 0, 0 on the canvas
            const ctx = outputImage.getContext('2d');
            ctx.drawImage(inputImage, outputX, outputY);
            resolve(outputImage);
          };

          // start loading our image
          inputImage.src = fr.result
        }
      }).then(_canvas => {
        if (maxWidth && maxHeight) {
          const canvas = document.createElement('canvas')
          const ctx = canvas.getContext('2d')
          canvas.width = maxWidth
          canvas.height = maxHeight
          ctx.drawImage(_canvas, 0, 0, _canvas.width, _canvas.height, 0, 0, maxWidth, maxHeight)
          return canvas
        }
        return _canvas
      })
    }

    return api
  }
</script>

{% endblock %}
