
{% layout "layout.liquid" %}

{% block content %}

<div class="pt-16" x-data="state()" x-init="init()">
  <div class="back flex-1">
    <a href="/dashboard" class="btn btn-icon flex-base"><span class="h-6 w-6 block m-auto">{% include '_icon.liquid', name: 'back' %}</span></a>
  </div>

  <div class="actions flex-1 justify-end flex space-x-2">
    <button x-show="hasChanges && !isSaving" x-text="publishButtonText" x-on:click="publish()" class="btn"></button>
    <button x-on:click="isMenuOpen ? isMenuOpen = false : isMenuOpen = true" class="btn btn-icon"><span class="h-6 w-6 block m-auto">{% include '_icon.liquid', name: 'snowman' %}</span></a>
  </div>

  <div x-bind:class="{ 'open': isSidebarOpen }" class="menu fixed right-0 z-20 mt-16 top-0 bottom-0 border border-t-0 bg-white">
    <div class="bg-white h-16 flex items-center justify-between border-b border-gray-200 px-4">
      <div class="font-semibold text-lg">Post settings</div>
      <button @click="isSidebarOpen = false" class="btn btn-icon">{% include '_icon.liquid', name: 'close' %}</button>
    </div>
    <div class="p-4">
      <form>
        <div class="field-label">Tags</div>
        <input class="field-input" type="text" x-model="tags">
        <small class="text-sm">Comma-separated list of tags</small>
        <img class="w-100 h-auto" x-bind:src="featuredImage">
        <div class="field-label">Featured image</div>
        <input class="field-input" type="file" x-on:change="uploadFeaturedImage">
      </form>
    </div>
  </div>

  <div id="editor">
    <textarea>{{ post.content }}</textarea>
  </div>

  <div class="alert z-30" x-bind:class="{ 'open': alert.open }">
    <div x-show="alert.title" class="alert-title" x-text="alert.title"></div>
    <div x-show="alert.content" class="alert-content" x-text="alert.content"></div>
  </div>

  <div class="snowman-menu z-20" style="display: none" x-show="isMenuOpen" x-on:click.away="isMenuOpen = false">
    <a x-show="isSidebarOpen === false" href="#" @click="(isSidebarOpen = true) && (isMenuOpen = false)">Edit settings</a>
    <a x-show="post.latestPublishedAt && post.latestPublishedAt < post.updatedAt" href="#" x-on:click="publish()">Publish changes</a>
    <a x-show="!post.latestPublishedAt && post.updatedAt" href="#" x-on:click="publish()">Publish</a>
    <a x-show="post && post.latestPublishedAt" href="#" x-on:click="unpublish()">Unpublish</a>
    <a href="#" x-on:click="_delete()">Delete</a>
  </div>
</div>

<link rel="stylesheet" href="/easymde.min.css">
<style>
  .editor-preview { background: inherit; }
</style>
<link rel="stylesheet" href="/preview.css">
<script src="https://cdn.jsdelivr.net/highlight.js/latest/highlight.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/highlight.js/latest/styles/github.min.css">
<script src="/easymde.min.js"></script>
<script>

  const mde = new EasyMDE({ 
    uploadImage: true, 
    placeholder: 'Post content', 
    sideBySideFullscreen: false,
    spellChecker: false,
    renderingConfig: {
      codeSyntaxHighlighting: true
    },
    async imageUploadFunction(file, onSuccess, onError) {

      return new Promise(async (res) => {
        const canvas = await crop(e.target.files[0], null, {
          maxWidth: 860
        })

        canvas.toBlob(async (blob) => {
          const url = await uploadImage(blob)
          res(url)
        }, 'image/jpeg', 1)
      })
    }
  })
  const toolbar = document.querySelector('.editor-toolbar')
  //const menu = document.querySelector('.menu')
  const _back = document.querySelector('.back')
  const _actions = document.querySelector('.actions')
  const back = _back.parentNode.removeChild(_back)
  const actions = _actions.parentNode.removeChild(_actions)
  const container = document.createElement('div')
  const title = document.createElement('input')
  toolbar.classList.add('hidden')
  title.setAttribute('placeholder', 'Title')
  title.setAttribute('x-model', 'title')
  const titleWrapper = document.createElement('div')
  titleWrapper.appendChild(title)
  {% if post.title.length == 0 %}title.setAttribute('autofocus', 'autofocus'){% endif %}
  title.classList.add('title')
  titleWrapper.classList.add('title-wrapper', 'mt-6')
  const editor = document.querySelector('.CodeMirror')
  editor.parentNode.insertBefore(titleWrapper, editor)
  const parent = toolbar.parentNode
  container.appendChild(back)
  container.appendChild(toolbar)
  container.appendChild(actions)
  parent.insertBefore(container, parent.childNodes[0])
  container.classList.add('fixed', 'bg-white', 'z-10', 'top-0', 'flex-base', 'w-full', 'px-4', 'h-16', 'border-b', 'border-gray-200');
  //container.appendChild(menu)

  {% if post.latestPublishedAt < post.updatedAt and post.updatedAt != null and post.latestPublishedAt != null %}
    {% assign startWithChanges = true %}
  {% endif %} 
  {% if post.updatedAt != null and post.latestPublishedAt == null %}
    {% assign startWithChangesAndNeverPublished = true %}
  {% endif %}

  function state() {

    const api = {
      post: {{ post | json }},
      id: '{{ post.id }}',
      title: `{{ post.title }}`,
      content: `{{ post.content | escapeMarkdown }}`,
      tags: `{{ post.tags }}`,
      featuredImage: `{{ post.featuredImage }}`,
      {% if post.latestPublishedAt != null %}
      isPublished: true,
      publishButtonText: "Publish changes",
      {% else  %}
      isPublished: false,
      publishButtonText: "Publish",
      {% endif %}
      hasChanges: {% if post.updatedAt > post.latestPublishedAt or post.latestPublishedAt == null and post.updatedAt %}true{% else %}false{% endif %},
      isMenuOpen: false,
      isSidebarOpen: false,
      isSaving: false,
      alert: {},
      init($dispatch) { 

        let lastTyped = Date.now()
        window.addEventListener('keyup', e => {
          lastTyped = Date.now()
        })

        setInterval(() => {
          if (lastTyped < Date.now() - 1000) {
            if (!this.isSaving && (lastSaved.title !== this.title || lastSaved.content !== this.content || lastSaved.tags !== this.tags || lastSaved.featuredImage !== this.featuredImage)) {
              this.save()
            }
          }
        }, 2000)
      },
      save() {

        const { featuredImage, tags, title, content, id } = this
        this.isSaving = true

        return fetch(`/api/posts/${id === 'new' ? '' : id}`, {
          method: id === 'new' ? 'POST' : 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ tags, title, content, featuredImage })
        })
          .then(resp => resp.json().then(body => ([ resp, body ])))
          .then(([ resp, body ]) => {

            if (resp.status === 201 && body.data && body.data.id) {
              this.id = body.data.id
              window.history.pushState(null, null, `/editor/${this.id}`)
            }
            this.isSaving = false
            this.hasChanges = true

            lastSaved.title = title
            lastSaved.tags = tags
            lastSaved.content = content
            lastSaved.featuredImage = featuredImage
          })
      },
      publish() {
        fetch(`/api/posts/${this.id}/publish`, {
          method: 'POST'
        }).then(async () => {
          this.post = await fetch(`/api/posts/${this.id}`).then(resp => resp.json()).then(json => json.data)
          this.publishButtonText = 'Publish changes'
          this.hasChanges = false
          this.isPublished = true
          this.setAlert('Post published!')
        })
      },
      unpublish() {
        if (confirm('Are you sure you want to unpublish this post?')) {
          fetch(`/api/posts/${api.id}/unpublish`, {
            method: 'POST'
          }).then(async (resp) => {
            //window.location.reload()
            this.post = await fetch(`/api/posts/${this.id}`).then(resp => resp.json()).then(json => json.data)
            this.isPublished = false
            this.hasChanges = true
            this.publishButtonText = 'Publish'
            this.isMenuOpen = false
            this.setAlert('Post unpublished', 'It will not appear on your blog.')
          })
        }
      },
      _delete() {
        if (confirm('Are you sure you want to delete this post? This is permenant.')) {
          if (this.id === 'new')
            return window.location.href = '/dashboard'

          fetch(`/api/posts/${this.id}`, {
            method: 'DELETE'
          }).then(() => {
            window.location.href = '/dashboard'
          })
        }
      },

      setAlert(title, content, timeout=3000) {
        this.alert = { title, content, open: true }
        setTimeout(() => this.alert = { title, content }, timeout)
      },

      async uploadFeaturedImage(e) {
        const canvas = await crop(e.target.files[0], null, {
          maxWidth: 860
        })
        canvas.toBlob(async (blob) => {
          const url = await uploadImage(blob)
          //const url = canvas.toDataURL('image/jpeg')
          this.featuredImage = url
        }, 'image/jpeg', 1)
      },
    }

    async function uploadImage(file) {
      const { data, errors } = await fetch('/api/presigned-upload-url').then(resp => resp.json())
      if (data) {
        const [ uploadUrl, hostingUrl ] = data
        const headers = new Headers({
          'Content-Type': file.type,
          'x-amz-acl': 'public-read'
        })
        await fetch(uploadUrl, {
          method: 'PUT',
          headers,
          body: file
        })
        return hostingUrl
      }
    }

    mde.codemirror.on('change', () => {
      api.content = mde.value()
    })

    title.addEventListener('blur', () => {
      toolbar.classList.remove('hidden')
    })

    
    title.addEventListener('focus', () => {
      toolbar.classList.add('hidden')
    })

    let lastSaved = {
      title: api.title,
      content: api.content,
      tags: api.tags,
      featuredImage: api.featuredImage
    }

    function crop(file, _aspectRatio, opts={}) {
      const { maxWidth, maxHeight, validations } = opts
      let aspectRatio;

      // we return a Promise that gets resolved with our canvas element
      return new Promise(resolve => {

        const fr = new FileReader
        fr.readAsDataURL(file)

        fr.onload = () => {

          // this image will hold our source image data
          const inputImage = new Image();

          // we want to wait for our image to load
          inputImage.onload = () => {

            if (validations) {
              for (let validate of validations) {
                const error = validate(inputImage)
                if (error) {
                  return alert(error)
                }
              }
            }

            // let's store the width and height of our image
            const inputWidth = inputImage.naturalWidth
            const inputHeight = inputImage.naturalHeight

            // get the aspect ratio of the input image
            const inputImageAspectRatio = inputWidth / inputHeight;
            aspectRatio = _aspectRatio || inputImageAspectRatio

            // if it's bigger than our target aspect ratio
            let outputWidth = inputWidth;
            let outputHeight = inputHeight;
            if (inputImageAspectRatio > aspectRatio) {
              outputWidth = inputHeight * aspectRatio;
            } else if (inputImageAspectRatio < aspectRatio) {
              outputHeight = inputWidth / aspectRatio;
            }

            // calculate the position to draw the image at
            const outputX = (outputWidth - inputWidth) * .5;
            const outputY = (outputHeight - inputHeight) * .5;

            // create a canvas that will present the output image
            const outputImage = document.createElement('canvas');

            // set it to the same size as the image
            outputImage.width = outputWidth;
            outputImage.height = outputHeight;

            // draw our image at position 0, 0 on the canvas
            const ctx = outputImage.getContext('2d');
            ctx.drawImage(inputImage, outputX, outputY);
            resolve(outputImage);
          };

          // start loading our image
          inputImage.src = fr.result
        }
      }).then(_canvas => {
        if (maxWidth) {
          const canvas = document.createElement('canvas')
          const ctx = canvas.getContext('2d')
          canvas.width = maxWidth
          canvas.height = maxHeight || (maxWidth / aspectRatio)
          ctx.drawImage(_canvas, 0, 0, _canvas.width, _canvas.height, 0, 0, canvas.width, canvas.height)
          return canvas
        }
        return _canvas
      })
    }

    window.api = api
    return api
  }
</script>

{% endblock %}
