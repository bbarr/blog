
{% layout "layout.liquid" %}

{% block content %}

<div x-data="state()" x-init="init()">
  <div class="back flex-1">
    <a href="/dashboard" class="btn btn-icon flex-base"><span class="h-6 w-6 block m-auto">{% include '_icon.liquid', name: 'back' %}</span></a>
  </div>

  <div class="actions flex-1 justify-end flex space-x-2">
    <button x-show="hasChanges && !isSaving" x-text="publishButtonText" x-on:click="publish()" class="btn"></button>
    <button x-on:click="openMenu()" class="btn btn-icon"><span class="h-6 w-6 block m-auto">{% include '_icon.liquid', name: 'snowman' %}</span></a>
  </div>

  <div id="editor">
    <textarea>{{ post.content }}</textarea>
  </div>
</div>

<link rel="stylesheet" href="https://unpkg.com/easymde/dist/easymde.min.css">
<style>
  .editor-preview { background: inherit; }
</style>
<link rel="stylesheet" href="/previews/{{ site.themeId }}/index.css">
<script src="https://cdn.jsdelivr.net/highlight.js/latest/highlight.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/highlight.js/latest/styles/github.min.css">
<script src="/easymde.min.js"></script>
<script>

  const mde = new EasyMDE({ 
    uploadImage: true, 
    placeholder: 'Post content', 
    sideBySideFullscreen: false,
    renderingConfig: {
      codeSyntaxHighlighting: true
    },
    async imageUploadFunction(file, onSuccess, onError) {
      const { data, errors } = await fetch('/api/presigned-upload-url').then(resp => resp.json())
      if (data) {
        const [ uploadUrl, hostingUrl ] = data
        const headers = new Headers({
          'Content-Type': file.type,
          'x-amz-acl': 'public-read'
        })
        return fetch(uploadUrl, {
          method: 'PUT',
          headers,
          body: file
        }).then(() => onSuccess(hostingUrl))
      }
    }
  })
  const toolbar = document.querySelector('.editor-toolbar')
  const _back = document.querySelector('.back')
  const _actions = document.querySelector('.actions')
  const back = _back.parentNode.removeChild(_back)
  const actions = _actions.parentNode.removeChild(_actions)
  const container = document.createElement('div')
  const title = document.createElement('input')
  title.setAttribute('placeholder', 'Post title')
  title.setAttribute('x-model', 'title')
  const titleWrapper = document.createElement('div')
  titleWrapper.appendChild(title)
  {% if post.title.length == 0 %}title.setAttribute('autofocus', 'autofocus'){% endif %}
  title.classList.add('title')
  titleWrapper.classList.add('title-wrapper')
  const editor = document.querySelector('.CodeMirror')
  editor.parentNode.insertBefore(titleWrapper, editor)
  const parent = toolbar.parentNode
  container.appendChild(back)
  container.appendChild(toolbar)
  container.appendChild(actions)
  parent.insertBefore(container, parent.childNodes[0])
  container.classList.add('flex-base', 'w-full', 'px-4', 'h-16', 'border-b', 'border-gray-200', 'mb-10');

  function state() {
    const api = {
      id: '{{ post.id }}',
      title: '{{ post.title }}',
      content: `{{ post.content | escapeMarkdown }}`,
      publishButtonText: "Publish{% if post.latestPublishedAt and post.latestPublishedAt < post.updatedAt %} changes{% endif %}",
      hasChanges: {% if post.latestPublishedAt and post.latestPublishedAt < post.updatedAt %}true{% else %}false{% endif %},
      isSaving: false,
      init($dispatch) { 
        setInterval(() => {
          if (!this.isSaving && (lastSaved.title !== this.title || lastSaved.content !== this.content)) {
            console.log('saving!')
            this.save()
          }
        }, 5000)
      },
      save() {

        const { title, content, id } = api
        this.isSaving = true

        return fetch(`/api/posts/${id === 'new' ? '' : id}`, {
          method: id === 'new' ? 'POST' : 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ title, content })
        })
          .then(resp => resp.json().then(body => ([ resp, body ])))
          .then(([ body, resp ]) => {

            if (resp.status === 201 && body.data && body.data.id) {
              this.id = body.data.id
              window.history.pushState(null, null, `/editor/${this.id}`)
            }

            this.publishButtonText = 'Publish changes'
            this.isSaving = false
            this.hasChanges = true

            lastSaved.title = title
            lastSaved.content = content
            console.log('saved!')
          })
      },
      publish() {
        fetch('/api/posts/{{ post.id }}/publish', {
          method: 'POST'
        }).then(() => {
          this.publishButtonText = 'Publish'
          this.hasChanges = false
        })
      },
      openMenu() {

      },
      closeMenu() {

      }
    }

    mde.codemirror.on('change', () => {
      api.content = mde.value()
    })

    let lastSaved = {
      title: api.title,
      content: api.content
    }

    title.addEventListener('focus', () => {
      toolbar.classList.add('hidden')
    })

    title.addEventListener('blur', () => {
      toolbar.classList.remove('hidden')
    })

    window.api = api
    return api
  }
</script>

{% endblock %}
